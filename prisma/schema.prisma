// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  role         Role          @default(APPLICANT)
  jobPosting   Job[]
  applications Application[]
  image        String?
  sessions     Session[]
  accounts     Account[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  provider           String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Job {
  id                Int           @id @default(autoincrement())
  title             String
  description       String        // Detailed job description
  location          String        // City or "Remote"
  //coordinates     Json? // e.g., { "lat": 40.7128, "lng": -74.0060 }
  remoteStatus      String        @default("On-site") // "Remote", "Hybrid", "On-site"
  company           String
  employmentType    String        // "Permanent", "Contract", "Part-time", "Full-time", "Internship"
  experienceLevel   String        // "Entry-level", "Mid-level", "Senior", "Executive"
  salaryMin         Int?          // Minimum salary (optional, in USD or local currency)
  salaryMax         Int?          // Maximum salary (optional)
  currency          String?       // Currency for salary (e.g., "USD", "GBP")
  skills            String[]      // List of required skills (e.g., ["JavaScript", "React"])
  benefits          String[]      // List of benefits (e.g., ["Health Insurance", "Remote Work"])
  department        String?       // Department (e.g., "Engineering", "Marketing")
  industry          String?       // Industry (e.g., "Tech", "Finance")
  applicationDeadline DateTime?   // Application deadline
  contactEmail      String?       // Contact email for applications
  status            String        @default("Open") // "Open", "Closed", "Draft"
  poster            User          @relation(fields: [posterId], references: [id], onDelete: Cascade)
  posterId          Int
  applications      Application[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Application {
  id          Int      @id @default(autoincrement())
  applicant   User     @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId Int
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       Int
  createdAt   DateTime @default(now())
  updatedaAt  DateTime @updatedAt
  
}

enum Role {
  APPLICANT
  POSTER
}


